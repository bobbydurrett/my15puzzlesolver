Working on a 15 puzzle solver in Python for Rosetta Code:

http://rosettacode.org/wiki/15_puzzle_solver

astar.py is my A* algorithm attempt.
stuck on about 3 seconds for a 21 move puzzle.
not fast enough for the RC 52 move puzzle.

seems to hit 2 gigabyte limit on 30 move puzzle.
Could try 64 bit python to use more memory
or try optimizing memory usage.

seems to hit the 2 gig limit at about 1.6 million 
positions examined.

postest.py - created list of 5 million positions
in 2 gig of memory. Need to test inserting
this many in the priority queue.

idastar.py is my IDA* attempt. This is on the 
back burner while I'm working on my A* version.

Got the 30 move puzzle to run with 64 bit windows
version of Python 3.7.1

1700000 positions examined
1800000 positions examined
1900000 positions examined
2000000 positions examined
2100000 positions examined
2200000 positions examined
2300000 positions examined

Path length = 30

Path using rlud:

ddluuuldlurrdrdlllurrrullddrdr

Run time in seconds: 168.38073773099998

Blew up at about 8 gig memory on RC example:

19100000 positions examined
19200000 positions examined
19300000 positions examined
19400000 positions examined
19500000 positions examined
19600000 positions examined
Traceback (most recent call last):
  File "C:\bobby\15puzzlesolver\my15puzzlesolver\testone.py", line 87, in <module>
  File "C:\bobby\15puzzlesolver\my15puzzlesolver\astar.py", line 572, in a_star
  File "C:\bobby\15puzzlesolver\my15puzzlesolver\astar.py", line 136, in neighbors
  File "C:\bobby\15puzzlesolver\my15puzzlesolver\astar.py", line 36, in __init__
MemoryError

over 19 million nodes.

Updated postest.py to include priority queue pushes.

Number of positions to create? 5000000

5000000 successfully created.

Run time in seconds: 29.045173822000002

29 seconds to push and create 5,000,000 positions.

started intpos.py

did quick heuristics test htest.py.

code golf example had 43 for 52 move position and mine had 38.

Both had 13 for 21 move position.

tested using intpos.py instead of list of lists position:

C:\todoitems\rosettacode\15puzzlesolver\my15puzzlesolver>postest.py

Number of positions to create? 5000000

5000000 successfully created.

Run time in seconds: 24.96709779

Hit enter to continue:

C:\todoitems\rosettacode\15puzzlesolver\my15puzzlesolver>intpostest.py

Number of positions to create? 5000000

5000000 successfully created.

Run time in seconds: 10.893528313000001

Hit enter to continue:

11 seconds instead of 25 to load 5 million positions in the queue.

Did 12 million in 26 seconds.

C:\todoitems\rosettacode\15puzzlesolver\my15puzzlesolver>intpostest.py

Number of positions to create? 12000000

12000000 successfully created.

Run time in seconds: 26.476382996999998

Hit enter to continue:

So, I guess intpos.py takes less memory than the list based version.

C:\todoitems\rosettacode\15puzzlesolver\my15puzzlesolver>postest.py

Number of positions to create? 12000000
Traceback (most recent call last):
  File "C:\todoitems\rosettacode\15puzzlesolver\my15puzzlesolver\postest.py", line 23, in <module>
    [13,  8,  5,  2]]))
  File "C:\todoitems\rosettacode\15puzzlesolver\my15puzzlesolver\astar.py", line 181, in push
    heapq.heappush(self.qheap,new_object)
MemoryError

Checked code golf version:

before walking distance d=2
after walking distance d=42
before walking distance d=2

Looks like walking distance (manhattan distance) = 40 for
RC start position.

Also it seems to do both x and y direction linear conflicts.

mine has manhattan distance 36.

C:\todoitems\rosettacode\15puzzlesolver\my15puzzlesolver>htest.py
manhattan distance = 36
with linear conflicts distance = 38
38

Looks like difference is that it includes 0

tried changing my heuristic but then for 21 heuristic is 18.

Not sure if including 0 is right.

